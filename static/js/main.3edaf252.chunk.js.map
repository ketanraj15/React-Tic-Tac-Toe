{"version":3,"sources":["Components/Icon.js","App.js","index.js"],"names":["Icon","choice","className","tiktacArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","k","setK","changeItem","index","toast","type","Container","Row","position","autoClose","Col","md","Button","onClick","map","value","Card","CardBody","ReactDOM","render","document","getElementById"],"mappings":"gMAceA,EAVJ,SAAC,GACR,OADmB,EAAVC,QAEL,IAAK,QACD,OAAO,cAAC,IAAD,CAASC,UAAU,SAC9B,IAAK,SACD,OAAO,cAAC,IAAD,CAAaA,UAAU,SAClC,QACI,MAAO,K,qECObC,G,MAAa,IAAIC,MAAM,GAAGC,KAAK,KAsItBC,EApIL,WAEN,MAA0BC,oBAAS,GAAnC,mBAAKC,EAAL,KAAaC,EAAb,KACA,EAA+BF,mBAAS,IAAxC,mBAAKG,EAAL,KAAgBC,EAAhB,KACA,EAAaJ,mBAAS,GAAtB,mBAAKK,EAAL,KAAOC,EAAP,KAgDMC,EAAW,SAACC,GACd,OAAGL,EAEQM,YAAM,oBAAoB,CAACC,KAAK,UAEpB,IAApBd,EAAYY,GAMJC,YAAM,2BAA2B,CAACC,KAAK,WAJ9Cd,EAAYY,GAAOP,EAAS,QAAQ,SACpCC,GAAYD,GA/ChBK,EAAK,QACAV,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEpFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAEvBA,EAAY,IAAIA,EAAY,IAAQA,EAAY,IAAIA,EAAY,IAAuB,IAAhBA,EAAY,GAEzFQ,EAAcR,EAAY,GAAG,YAER,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAAyB,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAA0B,IAAhBA,EAAY,IAEhMQ,EAAc,iBAsBtB,OACI,cAACO,EAAA,EAAD,CAAWhB,UAAU,MAArB,SACI,eAACiB,EAAA,EAAD,WACI,cAAC,IAAD,CAAgBC,SAAS,gBAAgBC,UAAW,IAApD,eACA,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGrB,UAAU,eAAtB,UAGQQ,EACI,8BACI,oBAAIR,UAAU,cAAd,SACEQ,MAMN,oBAAIR,UAAU,cAAd,SACKM,EAAQ,aAAa,kBAK3B,GAAHI,EACI,cAACY,EAAA,EAAD,CAAQC,QA1Bb,WACfhB,GAAYD,IAyBQ,2BAEA,cAACgB,EAAA,EAAD,CAAQC,QAzFhB,WACZhB,GAAW,GACXE,EAAc,IACdR,EAAYE,KAAK,IACjBQ,EAAK,IAqFe,wBAKR,qBAAKX,UAAU,OAAf,SAEQC,EAAYuB,KAAI,SAACC,EAAMZ,GAAP,OACZ,cAACa,EAAA,EAAD,CAAMH,QAAS,kBAAIX,EAAWC,IAA9B,SACI,cAACc,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACI,cAAC,EAAD,CAAMD,OAAQE,EAAYY,uBCzHlEe,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.3edaf252.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes,FaRegCircle,FaPen } from \"react-icons/fa\";\r\n \r\n\r\nconst Icon=({choice})=>{\r\n    switch(choice){\r\n        case \"cross\":\r\n            return <FaTimes className=\"icon\"/>\r\n        case \"circle\":\r\n            return <FaRegCircle className=\"icon\"/>\r\n        default:\r\n            return \"\"\r\n    }\r\n}\r\nexport default Icon;","import React, { useState } from \"react\";\r\nimport Icon from \"./Components/Icon\";\r\n\r\n\r\n// importing react Tostify\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n//importing react-strap\r\n// step 1. npm i bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Button,Container,Card,CardBody,Row,Col } from 'reactstrap';\r\n\r\n// own css style should always be in bottom :css overloading\r\nimport \"./style.css\"\r\n\r\n//creating a array of size 9 and filling it with empty\r\nconst tiktacArray= new Array(9).fill(\"\");\r\n\r\nconst App=()=>{\r\n\r\n    let [isCross,setIsCross]= useState(true);\r\n    let [winMessage,setWinMessage]=useState(\"\");\r\n    let [k,setK]=useState(0);\r\n\r\n    const playAgain=()=>{\r\n        setIsCross(true);\r\n        setWinMessage(\"\");\r\n        tiktacArray.fill(\"\");\r\n        setK(0);\r\n    }\r\n    const findWinner=()=>{\r\n        setK(1);\r\n         if((tiktacArray[0]==tiktacArray[1]) && (tiktacArray[0]==tiktacArray[2]) && tiktacArray[0]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[0]+\" has won\")\r\n         }\r\n         else if((tiktacArray[3]==tiktacArray[4]) && (tiktacArray[3]==tiktacArray[5]) && tiktacArray[3]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[3]+\" has won\");\r\n         }\r\n         else if((tiktacArray[6]==tiktacArray[7]) && (tiktacArray[6]==tiktacArray[8]) && tiktacArray[6]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[6]+\" has won\");\r\n         }\r\n         else if((tiktacArray[0]==tiktacArray[3]) && (tiktacArray[0]==tiktacArray[6]) && tiktacArray[0]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[0]+\" has won\");\r\n         }\r\n         else if((tiktacArray[1]==tiktacArray[4]) && (tiktacArray[1]==tiktacArray[7]) && tiktacArray[1]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[1]+\" has won\");\r\n         }\r\n         else if((tiktacArray[2]==tiktacArray[5]) && (tiktacArray[2]==tiktacArray[8]) && tiktacArray[2]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[2]+\" has won\");\r\n         }\r\n         else if((tiktacArray[0]==tiktacArray[4]) && (tiktacArray[0]==tiktacArray[8]) && tiktacArray[0]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[0]+\" has won\");\r\n         }\r\n         else if((tiktacArray[2]==tiktacArray[4]) && (tiktacArray[2]==tiktacArray[6]) && tiktacArray[2]!=\"\")\r\n         {\r\n            setWinMessage(tiktacArray[2]+\" has won\");\r\n         }\r\n         else if(tiktacArray[0]!=\"\" && tiktacArray[1]!=\"\"&& tiktacArray[2]!=\"\" && tiktacArray[3]!=\"\" && tiktacArray[4]!=\"\" && tiktacArray[5]!=\"\" && tiktacArray[6]!=\"\" && tiktacArray[7]!=\"\" && tiktacArray[8]!=\"\") \r\n         {\r\n            setWinMessage(\"Game Drawn\");\r\n         }\r\n    }\r\n    \r\n    const changeItem=(index)=>{\r\n        if(winMessage)\r\n        {\r\n            return toast(\"Game Over,Restart\",{type:\"error\"});\r\n        }\r\n        if(tiktacArray[index]==\"\")\r\n        {\r\n            tiktacArray[index]=isCross? \"cross\":\"circle\";\r\n            setIsCross(!isCross);\r\n        }\r\n        else{\r\n            return toast(\"This is already occupied\",{type:\"error\"});\r\n        }\r\n        findWinner();\r\n    }\r\n    const changePlayer=()=>{\r\n        setIsCross(!isCross);\r\n    }\r\n    return (\r\n        <Container className=\"p-5\">\r\n            <Row>\r\n                <ToastContainer position=\"bottom-center\" autoClose={2000}> </ToastContainer>\r\n                <Col md={6} className=\"offset-md-3 \">\r\n                    {\r\n                        //to display the winner\r\n                        winMessage?(\r\n                            <div>\r\n                                <h1 className=\"text-center\">\r\n                                 {winMessage}   \r\n                                </h1>\r\n                                \r\n                            </div>\r\n                            \r\n                        ):(\r\n                            <h1 className=\"text-center\">\r\n                                {isCross?\"Cross Turn\":\"Circle's Turn\"}\r\n                            </h1>\r\n                        )\r\n                    }\r\n                    {\r\n                        k==0?(\r\n                            <Button onClick={changePlayer}>Change Player</Button>\r\n                        ):(\r\n                            <Button onClick={playAgain}>Play Again</Button>\r\n                        )\r\n                            \r\n                    }\r\n\r\n                    <div className=\"grid\">\r\n                        {\r\n                            tiktacArray.map((value,index)=>(\r\n                                <Card onClick={()=>changeItem(index)}>\r\n                                    <CardBody className=\"box\">\r\n                                        <Icon choice={tiktacArray[index]}/>\r\n                                    </CardBody>\r\n                                    \r\n                                </Card>\r\n                            ))\r\n                        }\r\n\r\n                    </div>\r\n\r\n                    \r\n                </Col>\r\n                {/* <Col md={6} className=\"offset-md-5 \">\r\n                    {\r\n                        k==0?(\r\n                            <Button onClick={changePlayer}>Change Player</Button>\r\n                        ):(\r\n                            <Button>Game Started</Button>\r\n                        )\r\n                            \r\n                    }\r\n                    \r\n                </Col> */}\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from  './App'\r\n\r\nReactDOM.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}